name: Release

on:
  workflow_dispatch:
    inputs:
      release:
        description: 'RELEASE'
        required: true
        type: string

concurrency:
  group: release

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      release_name: ${{ steps.input-check.outputs.release_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: input check
        id: input-check
        shell: bash
        run: |
          RELEASE_INPUT="${{ inputs.release }}"
          RELEASE_NAME=${RELEASE_INPUT##* }

          echo "::set-output name=release_name::$RELEASE_NAME"
      - uses: cardinalby/git-get-release-action@v1
        id: get_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseName: ${{ steps.input-check.outputs.release_name }}
      - uses: eregon/publish-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ steps.get_release.outputs.id }}

  deploy-release:
    runs-on: ubuntu-20.04
    needs:
      - release
    env:
      DEPLOY: ${{ secrets.MAINNET_DEPLOY }}
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - name: Checkout code
        if: "${{ env.DEPLOY == 'true' }}"
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Authenticate to Google Cloud
        if: "${{ env.DEPLOY == 'true' }}"
        id: 'auth'
        uses: 'google-github-actions/auth@v0'
        with:
          workload_identity_provider: ${{ secrets.MAINNET_GOOGLE_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.MAINNET_SERVICE_ACCOUNT_EMAIL }}
          project_id: ${{ secrets.MAINNET_GCP_PROJECT_ID }}
      - name: Set up Cloud SDK
        if: "${{ env.DEPLOY == 'true' }}"
        uses: google-github-actions/setup-gcloud@v0
      - name: Get secrets
        if: "${{ env.DEPLOY == 'true' }}"
        id: secrets
        uses: google-github-actions/get-secretmanager-secrets@main
        with:
          secrets: |-
            SSH_HOST:${{ secrets.MAINNET_GCP_PROJECT_ID }}/SSH_HOST
            SSH_PORT:${{ secrets.MAINNET_GCP_PROJECT_ID }}/SSH_PORT
            SSH_USERNAME:${{ secrets.MAINNET_GCP_PROJECT_ID }}/SSH_USERNAME
            SSH_KEY:${{ secrets.MAINNET_GCP_PROJECT_ID }}/SSH_KEY
            WEB_FEDERATED_ENVIRONMENT:${{ secrets.MAINNET_GCP_PROJECT_ID }}/WEB_FEDERATED_ENVIRONMENT
            WEB_FEDERATED_NAME:${{ secrets.MAINNET_GCP_PROJECT_ID }}/WEB_FEDERATED_NAME
            WEB_FEDERATED_SECRET:${{ secrets.MAINNET_GCP_PROJECT_ID }}/WEB_FEDERATED_SECRET
            WEB_FEDERATED_SENTRY_DSN:${{ secrets.MAINNET_GCP_PROJECT_ID }}/WEB_FEDERATED_SENTRY_DSN
            WEB_FEDERATED_DNS:${{ secrets.MAINNET_GCP_PROJECT_ID }}/WEB_FEDERATED_DNS
            WEB_FEDERATED_URL:${{ secrets.MAINNET_GCP_PROJECT_ID }}/WEB_FEDERATED_URL
            WEBSITE_URL:${{ secrets.MAINNET_GCP_PROJECT_ID }}/WEBSITE_URL
            SUPPORT_MAIL:${{ secrets.MAINNET_GCP_PROJECT_ID }}/SUPPORT_MAIL
            RPC_URL:${{ secrets.MAINNET_GCP_PROJECT_ID }}/RPC_URL
      - name: Deploy
        if: "${{ env.DEPLOY == 'true' }}"
        uses: appleboy/ssh-action@master
        with:
          host: ${{ steps.secrets.outputs.SSH_HOST }}
          port: ${{ steps.secrets.outputs.SSH_PORT }}
          username: ${{ steps.secrets.outputs.SSH_USERNAME }}
          key: ${{ steps.secrets.outputs.SSH_KEY }}
          script: |
            ./connect.sh
            helm repo add myriadsocial https://charts.myriad.social
            helm repo update
            helm upgrade myriad-federated myriadsocial/myriad-federated \
              --install \
              --set-string image.tag=${{ needs.release.outputs.release_name }} \
              --set-string config.app.environment=${{ steps.secrets.outputs.WEB_FEDERATED_ENVIRONMENT }} \
              --set-string config.app.name="${{ steps.secrets.outputs.WEB_FEDERATED_NAME }}" \
              --set-string config.app.version=${{ needs.compute-build-info.outputs.package_version }} \
              --set-string config.app.authURL=${{ steps.secrets.outputs.WEB_FEDERATED_URL }} \
              --set-string config.app.secret=${{ steps.secrets.outputs.WEB_FEDERATED_SECRET }} \
              --set-string config.websiteURL=${{ steps.secrets.outputs.WEBSITE_URL }} \
              --set-string config.supportMail=${{ steps.secrets.outputs.SUPPORT_MAIL }} \
              --set-string config.rpcURL=${{ steps.secrets.outputs.RPC_URL }} \
              --set-string config.sentry.dsn=${{ steps.secrets.outputs.WEB_FEDERATED_SENTRY_DSN }} \
              --set ingress.enabled=true \
              --set-string ingress.className=nginx \
              --set-string ingress.annotations."cert-manager\.io/cluster-issuer"=letsencrypt \
              --set-string ingress.annotations."nginx\.ingress\.kubernetes\.io/proxy-body-size"="100m" \
              --set-string ingress.annotations."nginx\.org/client-max-body-size"="100m" \
              --set-string ingress.hosts[0].host=${{ steps.secrets.outputs.WEB_FEDERATED_DNS }} \
              --set-string ingress.hosts[0].paths[0].path=/ \
              --set-string ingress.hosts[0].paths[0].pathType=ImplementationSpecific \
              --set-string ingress.tls[0].secretName=myriad-federated-tls \
              --set-string ingress.tls[0].hosts[0]=${{ steps.secrets.outputs.WEB_FEDERATED_DNS }} \
              --set-string resources.requests.cpu=300m \
              --set-string resources.requests.memory=512Mi \
              --set-string resources.limits.cpu=500m \
              --set-string resources.limits.memory=1024Mi \
              --set replicaCount=1 \
              --set autoscaling.enabled=true \
              --set autoscaling.minReplicas=1 \
              --set autoscaling.maxReplicas=11 \
              --set-string nodeSelector.pool=general
            kubectl rollout status deployment/myriad-federated
