name: Deployer

on:
  release:
    types:
      - published
  workflow_run:
    branches:
      - main
    workflows:
      - "Builder"
    types:
      - completed

concurrency:
  group: deployer

jobs:
  compute-build-info:
    runs-on: ubuntu-latest
    outputs:
      sha_short: ${{ steps.build-info.outputs.sha_short }}
      date: ${{ steps.build-info.outputs.date }}
      latest_tag: ${{ steps.build-info.outputs.latest_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Compute build info
        id: build-info
        shell: bash
        run: |
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
          echo "::set-output name=date::$(date +'%Y%m%d')"

          version=${GITHUB_REF#refs/*/}
          echo $version
          echo "::set-output name=latest_tag::$version"

  deploy-beta-release:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    needs: [compute-build-info]
    environment: testnet
    env:
      DEPLOY: ${{ secrets.TESTNET_DEPLOY }}
    steps:
      - name: Checkout code
        if: "${{ env.DEPLOY == 'true' }}"
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Authenticate to Google Cloud
        if: "${{ env.DEPLOY == 'true' }}"
        id: "auth"
        uses: "google-github-actions/auth@v0"
        with:
          workload_identity_provider: ${{ secrets.TESTNET_GOOGLE_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.TESTNET_SERVICE_ACCOUNT_EMAIL }}
          project_id: ${{ secrets.TESTNET_GCP_PROJECT_ID }}
      - name: Set up Cloud SDK
        if: "${{ env.DEPLOY == 'true' }}"
        uses: google-github-actions/setup-gcloud@v0
      - name: Get secrets
        if: "${{ env.DEPLOY == 'true' }}"
        id: secrets
        uses: google-github-actions/get-secretmanager-secrets@main
        with:
          secrets: |-
            SSH_HOST:${{ secrets.TESTNET_GCP_PROJECT_ID }}/SSH_HOST
            SSH_PORT:${{ secrets.TESTNET_GCP_PROJECT_ID }}/SSH_PORT
            SSH_USERNAME:${{ secrets.TESTNET_GCP_PROJECT_ID }}/SSH_USERNAME
            SSH_KEY:${{ secrets.TESTNET_GCP_PROJECT_ID }}/SSH_KEY
            RPC_URL:${{ secrets.TESTNET_GCP_PROJECT_ID }}/RPC_URL
            API_URL:${{ secrets.TESTNET_GCP_PROJECT_ID }}/API_URL
            API_KEY:${{ secrets.TESTNET_GCP_PROJECT_ID }}/API_KEY
            DASHBOARD_DNS:${{ secrets.TESTNET_GCP_PROJECT_ID }}/DASHBOARD_DNS
      - name: Deploy
        if: "${{ env.DEPLOY == 'true' }}"
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            ./connect.sh
            helm repo add debio https://charts.myriad.social
            helm repo update
            helm upgrade myriad-federated debio/myriad-federated \
              --install \
              --set-string image.repository=gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ github.repository }} \
              --set-string image.tag=${{ needs.compute-build-info.outputs.sha_short }} \
              --set-string imagePullSecrets[0].name=gcr-auth \
              --set-string config.appAuthURL=https://${{ secrets.INGRESS_HOST }} \
              --set-string config.rpcURL=${{ steps.secrets.outputs.RPC_URL }} \
              --set-string config.apiURL=${{ steps.secrets.outputs.API_URL }} \
              --set-string config.apiKey=${{ steps.secrets.outputs.API_KEY }} \
              --set ingress.enabled=true \
              --set-string ingress.className=nginx \
              --set-string ingress.annotations."cert-manager\.io/cluster-issuer"=letsencrypt \
              --set-string ingress.annotations."nginx\.ingress\.kubernetes\.io/limit-rps"="100" \
              --set-string ingress.hosts[0].host=${{ secrets.INGRESS_HOST }} \
              --set-string ingress.hosts[0].paths[0].path=/ \
              --set-string ingress.hosts[0].paths[0].pathType=ImplementationSpecific \
              --set-string ingress.tls[0].secretName=myriad-federated-tls \
              --set-string ingress.tls[0].hosts[0]=${{ secrets.INGRESS_HOST }} \
              --set-string resources.requests.cpu=300m \
              --set-string resources.requests.memory=512Mi \
              --set-string resources.limits.cpu=500m \
              --set-string resources.limits.memory=1024Mi \
              --set replicaCount=1 \
              --set autoscaling.enabled=true \
              --set autoscaling.minReplicas=1 \
              --set autoscaling.maxReplicas=10 \
              --set-string nodeSelector.pool=general
            kubectl rollout status deployment/myriad-federated
      - name: Sleuth webhook
        shell: bash
        run: |
          curl -X POST -d api_key=${{ secrets.SLEUTH_API_KEY }} \
          -d environment=${{ secrets.TESTNET_SLEUTH_ENVIRONMENT }} \
          -d sha=$GITHUB_SHA ${{ secrets.FEDERATED_SLEUTH_WEBHOOK }}

  deploy-pre-release:
    if: "github.event.release.prerelease && contains(needs.compute-build-info.outputs.latest_tag, 'rc')"
    runs-on: ubuntu-latest
    needs: [compute-build-info]
    environment: mainnet
    env:
      DEPLOY: ${{ secrets.MAINNET_DEPLOY }}
    steps:
      - name: Checkout code
        if: "${{ env.DEPLOY == 'true' }}"
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Deploy
        if: "${{ env.DEPLOY == 'true' }}"
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            ./connect.sh
            helm repo add debio https://charts.myriad.social
            helm repo update
            helm upgrade myriad-federated debio/myriad-federated \
              --install \
              --set-string image.repository=gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ github.repository }} \
              --set-string image.tag=${{ needs.compute-build-info.outputs.latest_tag }} \
              --set-string imagePullSecrets[0].name=gcr-auth \
              --set-string config.appAuthURL=https://${{ secrets.INGRESS_HOST }} \
              --set-string config.rpcURL=${{ steps.secrets.outputs.RPC_URL }} \
              --set-string config.apiURL=${{ steps.secrets.outputs.API_URL }} \
              --set-string config.apiKey=${{ steps.secrets.outputs.API_KEY }} \
              --set ingress.enabled=true \
              --set-string ingress.className=nginx \
              --set-string ingress.annotations."cert-manager\.io/cluster-issuer"=letsencrypt \
              --set-string ingress.hosts[0].host=${{ secrets.INGRESS_HOST }} \
              --set-string ingress.hosts[0].paths[0].path=/ \
              --set-string ingress.hosts[0].paths[0].pathType=ImplementationSpecific \
              --set-string ingress.tls[0].secretName=myriad-federated-tls \
              --set-string ingress.tls[0].hosts[0]=${{ secrets.INGRESS_HOST }} \
              --set-string resources.requests.cpu=300m \
              --set-string resources.requests.memory=512Mi \
              --set-string resources.limits.cpu=500m \
              --set-string resources.limits.memory=1024Mi \
              --set replicaCount=1 \
              --set autoscaling.enabled=true \
              --set autoscaling.minReplicas=1 \
              --set autoscaling.maxReplicas=10 \
              --set-string nodeSelector.pool=general
            kubectl rollout status deployment/myriad-federated
      - name: Sleuth webhook
        shell: bash
        run: |
          curl -X POST -d api_key=${{ secrets.SLEUTH_API_KEY }} \
          -d environment=${{ secrets.MAINNET_SLEUTH_ENVIRONMENT }} \
          -d sha=$GITHUB_SHA ${{ secrets.FEDERATED_SLEUTH_WEBHOOK }}

  deploy-release:
    if: "startsWith(github.ref, 'refs/tags/') && !github.event.release.prerelease"
    runs-on: ubuntu-latest
    needs: [compute-build-info]
    environment: mainnet
    env:
      DEPLOY: ${{ secrets.MAINNET_DEPLOY }}
    steps:
      - name: Checkout code
        if: "${{ env.DEPLOY == 'true' }}"
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Deploy
        if: "${{ env.DEPLOY == 'true' }}"
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            ./connect.sh
            helm repo add debio https://charts.myriad.social
            helm repo update
            helm upgrade myriad-federated debio/myriad-federated \
              --install \
              --set-string image.repository=gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ github.repository }} \
              --set-string image.tag=${{ needs.compute-build-info.outputs.latest_tag }} \
              --set-string imagePullSecrets[0].name=gcr-auth \
              --set ingress.enabled=true \
              --set-string ingress.className=nginx \
              --set-string ingress.annotations."cert-manager\.io/cluster-issuer"=letsencrypt \
              --set-string ingress.hosts[0].host=${{ secrets.INGRESS_HOST }} \
              --set-string ingress.hosts[0].paths[0].path=/ \
              --set-string ingress.hosts[0].paths[0].pathType=ImplementationSpecific \
              --set-string ingress.tls[0].secretName=myriad-federated-tls \
              --set-string ingress.tls[0].hosts[0]=${{ secrets.INGRESS_HOST }} \
              --set-string resources.requests.cpu=100m \
              --set-string resources.requests.memory=128Mi \
              --set-string resources.limits.cpu=100m \
              --set-string resources.limits.memory=128Mi \
              --set replicaCount=3 \
              --set autoscaling.enabled=true \
              --set autoscaling.minReplicas=3 \
              --set autoscaling.maxReplicas=11 \
              --set-string nodeSelector.pool=general
            kubectl rollout status deployment/myriad-federated
      - name: Sleuth webhook
        shell: bash
        run: |
          curl -X POST -d api_key=${{ secrets.SLEUTH_API_KEY }} \
          -d environment=${{ secrets.MAINNET_SLEUTH_ENVIRONMENT }} \
          -d sha=$GITHUB_SHA ${{ secrets.FEDERATED_SLEUTH_WEBHOOK }}
